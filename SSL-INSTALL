Adding SSL capabilities to MySQL and JDBC:
------------------------------------------

A) Installation and configuration of MySQL with SSL support
   (you need this for databases that you want to query remotely)

1. Check if your currently installed MySQL server supports SSL:

shell> mysql
mysql> SHOW VARIABLES LIKE 'have_openssl';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| have_openssl  | YES   |
+---------------+-------+

   If the value is YES, the server supports OpenSSL connections and you can
   skip step 2. If not, you need to change to another version. 

   MySQL 5.0 higher has built-in SSL support. 
   MySQL 4.1 probably needs to be built from source since SSL support is not 
   supported by default.
   In any case, OpenSSL is required.
  
2. If you have to recompile MySQL with SSL support, make sure that libraries
   for OpenSSL and termcaps are installed on your system.
   Execute the following commands to compile and install MySQL

shell> groupadd mysql
shell> useradd -g mysql mysql
shell> gunzip < mysql-4.1.14.tar.gz | tar -xvf -
shell> cd mysql-4.1.14
shell> ./configure --prefix=/usr/local/mysql --with-vio --with-openssl 
shell> make install
shell> cp support-files/my-medium.cnf /etc/my.cnf
shell> cd /usr/local/mysql
shell> bin/mysql_install_db --user=mysql
shell> chown -R root  .
shell> chown -R mysql var
shell> chgrp -R mysql .

3. Create or copy SSL-certificates for client (client-cert.pem and 
   client-key.pem) and server (server-cert.pem and server-key.pem). 
   Also needed is certificate of CA that signed server certificate 
   (cacert.pem). Sample certificates can be found in folder SSL of the
   MySQL sources.

4. Change /etc/my.cnf to include certificate locations (replace $DIR with 
   location of certificates). 
   In section [mysqld] add the following for the database server:

ssl-ca=$DIR/cacert.pem
ssl-cert=$DIR/server-cert.pem
ssl-key=$DIR/server-key.pem

   Check also that in section [mysqld] bind-address is not set to localhost,
   otherwise remote access to the database server is not allowed.
   You can try to connect to the database server using telnet and should 
   receive something like:

shell> telnet A.B.C.D 3306
Trying A.B.C.D...
Connected to A.B.C.D.
Escape character is '^]'.
8
4.1.19-log?:F0[Z2(,!r+x@sD:5:cfTConnection closed by foreign host.

5. If you want to use the MySQL client program mysql to connect to the local 
   or a reomte database using SSL, you need add the following to the 
   [client]-section (this does not affect JDBC queries):

ssl-ca=$DIR/cacert.pem
ssl-cert=$DIR/client-cert.pem
ssl-key=$DIR/client-key.pem

6. Start the database server with the init.d MySQL script provided with the 
   sources or manually with mysqld_safe.

7. Secure database by locking the root account with password and delete 
   anonymous account:

shell> mysql -u root
mysql> DELETE FROM mysql.user WHERE User = '';
mysql> UPDATE mysql.user SET Password = PASSWORD('newpwd')
    ->     WHERE User = 'root';
mysql> FLUSH PRIVILEGES;
mysql> exit;

----------------

B) Preparation for NASTY
    
1. Create database "nasty" and tables needed by nasty:

shell> mysql -u root -p < prepare.mysql

2. Add account for remote access:

shell> mysql -u root -p
mysql> GRANT SELECT,INSERT,CREATE,DROP,DELETE,LOCK TABLES ON nasty.* TO 'remoteuser'@'%'
    ->    IDENTIFIED BY 'remotepassword' REQUIRE SSL;
mysql> FLUSH PRIVILEGES;
mysql> exit;

----------------

C) Configure Java truststore and keystore for JDBC over SSL
   (you need to do this on the machine running tomcat and the NASTY GUI)

1. Import the certificate of the CA that signed the database server certificate
   to the Java truststore. Before, you need to copy the the certificate file 
   (cacert.pem) from the machine running the database (unless the GUI is running 
   on the same machine). 
   Then, add the CA certificate (cacert.pem) to truststore cacerts, located in 
   $JAVA-HOME/lib/security ($JAVA-HOME: path to the Java Runtime Environment,
   e.g. /usr/lib/java2/jre):

shell> keytool -import -alias mysqlServerCACert -file cacert.pem
    ->      -keystore $JAVA-HOME/lib/security/cacerts

2. You need a client certificate for JDBC connections via SSL. Check if you
   already have one (maybe because you use the Tomcat SSL-Connector):

shell> keytool -list

   If not, create one:

shell> keytool -genkey -keyalg rsa -alias mysqlClientCertificate 

   The client certificate is stored in ~/.keystore. Make sure to run the above
   commands as the user that later runs tomcat (e.g. root or tomcat).
   Keytool will prompt you for the following information, you should respond 
   with information that is appropriate for your situation (initial keystore 
   password is "changeit"): 

Enter keystore password:  *********
What is your first and last name?
  [Unknown]:  Matthews
What is the name of your organizational unit?
  [Unknown]:  Software Development
What is the name of your organization?
  [Unknown]:  MySQL AB
What is the name of your City or Locality?
  [Unknown]:  Flossmoor
What is the name of your State or Province?
  [Unknown]:  IL
What is the two-letter country code for this unit?
  [Unknown]:  US
Is <CN=Matthews, OU=Software Development, O=MySQL AB,
 L=Flossmoor, ST=IL, C=US> correct?
  [no]:  y

Enter key password for <mysqlClientCertificate>
        (RETURN if same as keystore password):

3. Now you can initialize secure JDBC connections by adding "useSSL=true" to the JDBC parameters.

